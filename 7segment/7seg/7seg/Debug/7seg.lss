
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066d  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000256  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 49 00 	call	0x92	; 0x92 <main>
  7a:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <update_segment>:
#include <util/delay.h>

char B[7] = {0, 0, 0, 0, 1, 1, 1};

void update_segment(uint8_t bit_value) {
	if (bit_value == 0) {
  82:	81 11       	cpse	r24, r1
  84:	02 c0       	rjmp	.+4      	; 0x8a <update_segment+0x8>
		PORTC &= ~(1 << 0); // Clear bit 0 (cbi equivalent)
  86:	a8 98       	cbi	0x15, 0	; 21
  88:	01 c0       	rjmp	.+2      	; 0x8c <update_segment+0xa>
		} else {
		PORTC |= (1 << 0);  // Set bit 0 (sbi equivalent)
  8a:	a8 9a       	sbi	0x15, 0	; 21
	}
	
	// Create clock pulse on PORTC1 (used for strobing/latching)
	PORTC |= (1 << 1);  // Set bit 1
  8c:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~(1 << 1); // Clear bit 1
  8e:	a9 98       	cbi	0x15, 1	; 21
  90:	08 95       	ret

00000092 <main>:
}

int main(void) {
	// Configure PC0 and PC1 as output
	DDRC |= (1 << 0) | (1 << 1);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	83 60       	ori	r24, 0x03	; 3
  96:	84 bb       	out	0x14, r24	; 20
	
	// Clear PORTC to ensure initial state
	PORTC = 0x00;
  98:	15 ba       	out	0x15, r1	; 21
  9a:	c0 e6       	ldi	r28, 0x60	; 96
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	07 e6       	ldi	r16, 0x67	; 103
  a0:	10 e0       	ldi	r17, 0x00	; 0

	// Update 7-segment display based on array B
	for (int i = 0; i < 7; i++) {
		update_segment(B[i]);
  a2:	89 91       	ld	r24, Y+
  a4:	0e 94 41 00 	call	0x82	; 0x82 <update_segment>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	83 ec       	ldi	r24, 0xC3	; 195
  aa:	99 e0       	ldi	r25, 0x09	; 9
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
	
	// Clear PORTC to ensure initial state
	PORTC = 0x00;

	// Update 7-segment display based on array B
	for (int i = 0; i < 7; i++) {
  b4:	c0 17       	cp	r28, r16
  b6:	d1 07       	cpc	r29, r17
  b8:	a1 f7       	brne	.-24     	; 0xa2 <main+0x10>
		update_segment(B[i]);
		_delay_ms(10);
	}

	// Keep the final state
	PORTC |= (1 << 1); // Ensure last clock pulse is high
  ba:	a9 9a       	sbi	0x15, 1	; 21
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2a>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
