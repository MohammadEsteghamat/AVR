
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b02  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062b  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051b  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  6c:	c2 9a       	sbi	0x18, 2	; 24
  6e:	00 c0       	rjmp	.+0      	; 0x70 <toggle_e+0x4>
  70:	c2 98       	cbi	0x18, 2	; 24
  72:	08 95       	ret

00000074 <lcd_write>:
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
  78:	66 23       	and	r22, r22
  7a:	11 f0       	breq	.+4      	; 0x80 <lcd_write+0xc>
  7c:	c0 9a       	sbi	0x18, 0	; 24
  7e:	01 c0       	rjmp	.+2      	; 0x82 <lcd_write+0xe>
  80:	c0 98       	cbi	0x18, 0	; 24
  82:	c1 98       	cbi	0x18, 1	; 24
  84:	bb 9a       	sbi	0x17, 3	; 23
  86:	bc 9a       	sbi	0x17, 4	; 23
  88:	bd 9a       	sbi	0x17, 5	; 23
  8a:	be 9a       	sbi	0x17, 6	; 23
  8c:	c6 98       	cbi	0x18, 6	; 24
  8e:	c5 98       	cbi	0x18, 5	; 24
  90:	c4 98       	cbi	0x18, 4	; 24
  92:	c3 98       	cbi	0x18, 3	; 24
  94:	cc 23       	and	r28, r28
  96:	0c f4       	brge	.+2      	; 0x9a <lcd_write+0x26>
  98:	c6 9a       	sbi	0x18, 6	; 24
  9a:	c6 fd       	sbrc	r28, 6
  9c:	c5 9a       	sbi	0x18, 5	; 24
  9e:	c5 fd       	sbrc	r28, 5
  a0:	c4 9a       	sbi	0x18, 4	; 24
  a2:	c4 fd       	sbrc	r28, 4
  a4:	c3 9a       	sbi	0x18, 3	; 24
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  aa:	c6 98       	cbi	0x18, 6	; 24
  ac:	c5 98       	cbi	0x18, 5	; 24
  ae:	c4 98       	cbi	0x18, 4	; 24
  b0:	c3 98       	cbi	0x18, 3	; 24
  b2:	c3 fd       	sbrc	r28, 3
  b4:	c6 9a       	sbi	0x18, 6	; 24
  b6:	c2 fd       	sbrc	r28, 2
  b8:	c5 9a       	sbi	0x18, 5	; 24
  ba:	c1 fd       	sbrc	r28, 1
  bc:	c4 9a       	sbi	0x18, 4	; 24
  be:	c0 fd       	sbrc	r28, 0
  c0:	c3 9a       	sbi	0x18, 3	; 24
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  c6:	c3 9a       	sbi	0x18, 3	; 24
  c8:	c4 9a       	sbi	0x18, 4	; 24
  ca:	c5 9a       	sbi	0x18, 5	; 24
  cc:	c6 9a       	sbi	0x18, 6	; 24
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <lcd_read>:
  d2:	88 23       	and	r24, r24
  d4:	11 f0       	breq	.+4      	; 0xda <lcd_read+0x8>
  d6:	c0 9a       	sbi	0x18, 0	; 24
  d8:	01 c0       	rjmp	.+2      	; 0xdc <lcd_read+0xa>
  da:	c0 98       	cbi	0x18, 0	; 24
  dc:	c1 9a       	sbi	0x18, 1	; 24
  de:	bb 98       	cbi	0x17, 3	; 23
  e0:	bc 98       	cbi	0x17, 4	; 23
  e2:	bd 98       	cbi	0x17, 5	; 23
  e4:	be 98       	cbi	0x17, 6	; 23
  e6:	c2 9a       	sbi	0x18, 2	; 24
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_read+0x18>
  ea:	b3 9b       	sbis	0x16, 3	; 22
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <lcd_read+0x20>
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_read+0x22>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	b4 99       	sbic	0x16, 4	; 22
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	b5 99       	sbic	0x16, 5	; 22
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	b6 99       	sbic	0x16, 6	; 22
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_read+0x32>
 104:	c2 9a       	sbi	0x18, 2	; 24
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x36>
 108:	b3 99       	sbic	0x16, 3	; 22
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	b4 99       	sbic	0x16, 4	; 22
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	b5 99       	sbic	0x16, 5	; 22
 112:	84 60       	ori	r24, 0x04	; 4
 114:	b6 99       	sbic	0x16, 6	; 22
 116:	88 60       	ori	r24, 0x08	; 8
 118:	c2 98       	cbi	0x18, 2	; 24
 11a:	08 95       	ret

0000011c <lcd_waitbusy>:
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_read>
 122:	88 23       	and	r24, r24
 124:	dc f3       	brlt	.-10     	; 0x11c <lcd_waitbusy>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_waitbusy+0xc>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_read>
 12e:	08 95       	ret

00000130 <lcd_command>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_waitbusy>
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_write>
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <lcd_clrscr>:
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 14a:	08 95       	ret

0000014c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 154:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 156:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 158:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 15a:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 15c:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 15e:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 160:	be 9a       	sbi	0x17, 6	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 162:	80 ea       	ldi	r24, 0xA0	; 160
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 16a:	c4 9a       	sbi	0x18, 4	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 16c:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_toggle();
 16e:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 172:	80 ee       	ldi	r24, 0xE0	; 224
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 17a:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 17e:	c0 e1       	ldi	r28, 0x10	; 16
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 188:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 18c:	ce 01       	movw	r24, r28
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 192:	c3 98       	cbi	0x18, 3	; 24
    lcd_e_toggle();
 194:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 198:	21 97       	sbiw	r28, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1a2:	88 e0       	ldi	r24, 0x08	; 8
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1a8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1b2:	81 2f       	mov	r24, r17
 1b4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>

}/* lcd_init */
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <main>:
#include "lib/lcd.c"
int main(void)
{
    /* Replace with your application code */
	char mohammad[]= "mohammad \nesteghamat"; 
    	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_init>
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0x6>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
