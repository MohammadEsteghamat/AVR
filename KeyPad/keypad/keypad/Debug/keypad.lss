
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064b  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000580  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000284  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ed  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  8a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPadInit>:
			   {7,8,9},
			   {10,0,11}};
int x,y,v;
void KeyPadInit()
{
	   DDR |= 0b01111000;
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	88 67       	ori	r24, 0x78	; 120
  96:	8a bb       	out	0x1a, r24	; 26
	   DDR &= 0b11111000;
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	8a bb       	out	0x1a, r24	; 26
	   PORT |= 0b00000111;
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	8b bb       	out	0x1b, r24	; 27
	   PORT &= 0b10000111;
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	87 78       	andi	r24, 0x87	; 135
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret

000000ac <CheckPad>:
}
int CheckPad(){
	
	if ((PIN & 0b00000111)==0b00000111)
  ac:	99 b3       	in	r25, 0x19	; 25
  ae:	97 70       	andi	r25, 0x07	; 7
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	97 30       	cpi	r25, 0x07	; 7
  b6:	11 f4       	brne	.+4      	; 0xbc <CheckPad+0x10>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
  bc:	c9 01       	movw	r24, r18
  be:	08 95       	ret

000000c0 <SearchPad>:
int SearchPad()
{   int keypad;
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	for(x=0;x<4;x++)
  c4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
  c8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
	{
		PORT |= 0b01111000;
		PORT &=~(1<<(x+3));
  cc:	a1 e0       	ldi	r26, 0x01	; 1
  ce:	b0 e0       	ldi	r27, 0x00	; 0
}
int SearchPad()
{   int keypad;
	for(x=0;x<4;x++)
	{
		PORT |= 0b01111000;
  d0:	2b b3       	in	r18, 0x1b	; 27
  d2:	28 67       	ori	r18, 0x78	; 120
  d4:	2b bb       	out	0x1b, r18	; 27
		PORT &=~(1<<(x+3));
  d6:	3b b3       	in	r19, 0x1b	; 27
  d8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__data_end>
  dc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__data_end+0x1>
  e0:	4d 5f       	subi	r20, 0xFD	; 253
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
  e4:	bd 01       	movw	r22, r26
  e6:	02 c0       	rjmp	.+4      	; 0xec <SearchPad+0x2c>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	4a 95       	dec	r20
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <SearchPad+0x28>
  f0:	26 2f       	mov	r18, r22
  f2:	20 95       	com	r18
  f4:	23 23       	and	r18, r19
  f6:	2b bb       	out	0x1b, r18	; 27
		for (y=0;y<3;y++)
  f8:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <y+0x1>
  fc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <y>
		{   v = PIN & (1<<y) ;
			if(v==0)
			{
				keypad = key[x][y];
 100:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__data_end>
 104:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__data_end+0x1>
 108:	fe 01       	movw	r30, r28
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
	for(x=0;x<4;x++)
	{
		PORT |= 0b01111000;
		PORT &=~(1<<(x+3));
		for (y=0;y<3;y++)
		{   v = PIN & (1<<y) ;
 11e:	29 b3       	in	r18, 0x19	; 25
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	bd 01       	movw	r22, r26
 124:	04 2e       	mov	r0, r20
 126:	02 c0       	rjmp	.+4      	; 0x12c <SearchPad+0x6c>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <SearchPad+0x68>
 130:	26 23       	and	r18, r22
 132:	37 23       	and	r19, r23
 134:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <v+0x1>
 138:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <v>
			if(v==0)
 13c:	23 2b       	or	r18, r19
 13e:	11 f4       	brne	.+4      	; 0x144 <SearchPad+0x84>
			{
				keypad = key[x][y];
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
{   int keypad;
	for(x=0;x<4;x++)
	{
		PORT |= 0b01111000;
		PORT &=~(1<<(x+3));
		for (y=0;y<3;y++)
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	50 93 7d 00 	sts	0x007D, r21	; 0x80007d <y+0x1>
 14c:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <y>
 150:	32 96       	adiw	r30, 0x02	; 2
 152:	43 30       	cpi	r20, 0x03	; 3
 154:	51 05       	cpc	r21, r1
 156:	19 f7       	brne	.-58     	; 0x11e <SearchPad+0x5e>
		return 1;
	}
}
int SearchPad()
{   int keypad;
	for(x=0;x<4;x++)
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <__data_end+0x1>
 15e:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__data_end>
 162:	24 97       	sbiw	r28, 0x04	; 4
 164:	0c f4       	brge	.+2      	; 0x168 <SearchPad+0xa8>
 166:	b4 cf       	rjmp	.-152    	; 0xd0 <SearchPad+0x10>
				keypad = key[x][y];
			}
		}
		
	}
	PORT |= 0b00000111;
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	27 60       	ori	r18, 0x07	; 7
 16c:	2b bb       	out	0x1b, r18	; 27
	PORT &= 0b10000111;
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	27 78       	andi	r18, 0x87	; 135
 172:	2b bb       	out	0x1b, r18	; 27
	return keypad;
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <main>:
#include <avr/io.h>
#include "lib/KeyPad.h"

int main(void)
{  
   KeyPadInit();
 17a:	0e 94 49 00 	call	0x92	; 0x92 <KeyPadInit>
   DDRC =0XFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 bb       	out	0x14, r24	; 20
   while (1)
   {
	   if (CheckPad())
 182:	0e 94 56 00 	call	0xac	; 0xac <CheckPad>
 186:	89 2b       	or	r24, r25
 188:	21 f0       	breq	.+8      	; 0x192 <main+0x18>
	   {   
		   PORTC = SearchPad();
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <SearchPad>
 18e:	85 bb       	out	0x15, r24	; 21
 190:	f8 cf       	rjmp	.-16     	; 0x182 <main+0x8>
		
	   }
	   else
	   {
		   PORTC = 0X00;
 192:	15 ba       	out	0x15, r1	; 21
 194:	f6 cf       	rjmp	.-20     	; 0x182 <main+0x8>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
